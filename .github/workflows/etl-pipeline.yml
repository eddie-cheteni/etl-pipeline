name: data-pipeline-workflow

on:
  workflow_dispatch:  # Allow manual triggers
  schedule:
    - cron: "30 8 * * *"  # Run daily at 8:30 AM UTC
  

jobs:
  run-data-pipeline:
    runs-on: windows-latest
    timeout-minutes: 30  # Prevent hanging jobs
    steps:
      # 1. Pull repo content
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full git history
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      
      # 2. Setup Python with caching
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: ["pypy3.10", "3.9", "3.10", "3.11", "3.12", "3.13"]
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      # 3. Install dependencies with error handling
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt --no-cache-dir
          pip check  # Verify package compatibility

      # 4. Run data pipeline with proper error handling
      - name: Run ETL pipeline
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          HOSTNAME: ${{ secrets.HOSTNAME }}
          PASSWORD: ${{ secrets.PASSWORD }}
          PORT: ${{ secrets.PORT }}
          SFTP_HOST: ${{ secrets.SFTP_HOST }}
          USER_NAME: ${{ secrets.USER_NAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
        run: |
          python -c "import sys; from etl_pipeline import main; sys.exit(main())" || exit 1
      
      # 5. Git operations with better handling
      - name: Configure Git
        id: git-config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config pull.rebase true

      - name: Check for changes
        id: check-changes
        run: |
          git add .
          if git diff-index --quiet HEAD --; then
            echo "changes=false" >> $GITHUB_ENV
            echo "No changes detected"
          else
            echo "changes=true" >> $GITHUB_ENV
            git status --short
          fi

      - name: Commit and push changes
        if: env.changes == 'true'
        run: |
          git commit -m "Automated data update [skip ci]"
          git pull  # Ensure we're up to date
          git push